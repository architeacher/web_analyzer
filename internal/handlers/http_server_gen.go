// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	PasetoAuthScopes = "PasetoAuth.Scopes"
)

// Defines values for AnalysisDataFormsLoginFormDetailsMethod.
const (
	AnalysisDataFormsLoginFormDetailsMethodPOST AnalysisDataFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisErrorStatus.
const (
	AnalysisErrorStatusFailed AnalysisErrorStatus = "failed"
)

// Defines values for AnalysisInProgressStatus.
const (
	InProgress AnalysisInProgressStatus = "in_progress"
)

// Defines values for AnalysisResponseStatus.
const (
	AnalysisResponseStatusCompleted  AnalysisResponseStatus = "completed"
	AnalysisResponseStatusFailed     AnalysisResponseStatus = "failed"
	AnalysisResponseStatusInProgress AnalysisResponseStatus = "in_progress"
	AnalysisResponseStatusRequested  AnalysisResponseStatus = "requested"
)

// Defines values for AnalysisResultResultsFormsLoginFormDetailsMethod.
const (
	AnalysisResultResultsFormsLoginFormDetailsMethodPOST AnalysisResultResultsFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisResultStatus.
const (
	Completed AnalysisResultStatus = "completed"
)

// Defines values for CacheDependencyCheckStatus.
const (
	CacheDependencyCheckStatusHealthy   CacheDependencyCheckStatus = "healthy"
	CacheDependencyCheckStatusUnhealthy CacheDependencyCheckStatus = "unhealthy"
	CacheDependencyCheckStatusUnknown   CacheDependencyCheckStatus = "unknown"
)

// Defines values for DependencyCheckStatus.
const (
	DependencyCheckStatusHealthy   DependencyCheckStatus = "healthy"
	DependencyCheckStatusUnhealthy DependencyCheckStatus = "unhealthy"
	DependencyCheckStatusUnknown   DependencyCheckStatus = "unknown"
)

// Defines values for FormAnalysisLoginFormDetailsMethod.
const (
	FormAnalysisLoginFormDetailsMethodPOST FormAnalysisLoginFormDetailsMethod = "POST"
)

// Defines values for HealthResponseChecksStatus.
const (
	HealthResponseChecksStatusHealthy   HealthResponseChecksStatus = "healthy"
	HealthResponseChecksStatusUnhealthy HealthResponseChecksStatus = "unhealthy"
	HealthResponseChecksStatusUnknown   HealthResponseChecksStatus = "unknown"
)

// Defines values for HealthResponseChecksCacheStatus.
const (
	HealthResponseChecksCacheStatusHealthy   HealthResponseChecksCacheStatus = "healthy"
	HealthResponseChecksCacheStatusUnhealthy HealthResponseChecksCacheStatus = "unhealthy"
	HealthResponseChecksCacheStatusUnknown   HealthResponseChecksCacheStatus = "unknown"
)

// Defines values for HealthResponseChecksQueueStatus.
const (
	HealthResponseChecksQueueStatusHealthy   HealthResponseChecksQueueStatus = "healthy"
	HealthResponseChecksQueueStatusUnhealthy HealthResponseChecksQueueStatus = "unhealthy"
	HealthResponseChecksQueueStatusUnknown   HealthResponseChecksQueueStatus = "unknown"
)

// Defines values for HealthResponseChecksStorageStatus.
const (
	HealthResponseChecksStorageStatusHealthy   HealthResponseChecksStorageStatus = "healthy"
	HealthResponseChecksStorageStatusUnhealthy HealthResponseChecksStorageStatus = "unhealthy"
	HealthResponseChecksStorageStatusUnknown   HealthResponseChecksStorageStatus = "unknown"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDOWN        HealthResponseStatus = "DOWN"
	HealthResponseStatusMAINTENANCE HealthResponseStatus = "MAINTENANCE"
	HealthResponseStatusOK          HealthResponseStatus = "OK"
)

// Defines values for LivenessResponseStatus.
const (
	LivenessResponseStatusDOWN        LivenessResponseStatus = "DOWN"
	LivenessResponseStatusMAINTENANCE LivenessResponseStatus = "MAINTENANCE"
	LivenessResponseStatusOK          LivenessResponseStatus = "OK"
)

// Defines values for LoginFormMethod.
const (
	LoginFormMethodPOST LoginFormMethod = "POST"
)

// Defines values for ReadinessResponseChecksStatus.
const (
	ReadinessResponseChecksStatusHealthy   ReadinessResponseChecksStatus = "healthy"
	ReadinessResponseChecksStatusUnhealthy ReadinessResponseChecksStatus = "unhealthy"
	ReadinessResponseChecksStatusUnknown   ReadinessResponseChecksStatus = "unknown"
)

// Defines values for ReadinessResponseChecksCacheStatus.
const (
	ReadinessResponseChecksCacheStatusHealthy   ReadinessResponseChecksCacheStatus = "healthy"
	ReadinessResponseChecksCacheStatusUnhealthy ReadinessResponseChecksCacheStatus = "unhealthy"
	ReadinessResponseChecksCacheStatusUnknown   ReadinessResponseChecksCacheStatus = "unknown"
)

// Defines values for ReadinessResponseChecksQueueStatus.
const (
	ReadinessResponseChecksQueueStatusHealthy   ReadinessResponseChecksQueueStatus = "healthy"
	ReadinessResponseChecksQueueStatusUnhealthy ReadinessResponseChecksQueueStatus = "unhealthy"
	ReadinessResponseChecksQueueStatusUnknown   ReadinessResponseChecksQueueStatus = "unknown"
)

// Defines values for ReadinessResponseChecksStorageStatus.
const (
	ReadinessResponseChecksStorageStatusHealthy   ReadinessResponseChecksStorageStatus = "healthy"
	ReadinessResponseChecksStorageStatusUnhealthy ReadinessResponseChecksStorageStatus = "unhealthy"
	ReadinessResponseChecksStorageStatusUnknown   ReadinessResponseChecksStorageStatus = "unknown"
)

// Defines values for ReadinessResponseStatus.
const (
	DOWN        ReadinessResponseStatus = "DOWN"
	MAINTENANCE ReadinessResponseStatus = "MAINTENANCE"
	OK          ReadinessResponseStatus = "OK"
)

// Defines values for HealthResponseV1DependencyCheckStatus.
const (
	Healthy   HealthResponseV1DependencyCheckStatus = "healthy"
	Unhealthy HealthResponseV1DependencyCheckStatus = "unhealthy"
	Unknown   HealthResponseV1DependencyCheckStatus = "unknown"
)

// Defines values for ApiVersionHeader.
const (
	ApiVersionHeaderV1 ApiVersionHeader = "v1"
)

// Defines values for GetAnalysisParamsAPIVersion.
const (
	GetAnalysisParamsAPIVersionV1 GetAnalysisParamsAPIVersion = "v1"
)

// Defines values for GetAnalysisEventsParamsAPIVersion.
const (
	GetAnalysisEventsParamsAPIVersionV1 GetAnalysisEventsParamsAPIVersion = "v1"
)

// Defines values for AnalyzeURLParamsAPIVersion.
const (
	AnalyzeURLParamsAPIVersionV1 AnalyzeURLParamsAPIVersion = "v1"
)

// AnalysisData defines model for AnalysisData.
type AnalysisData struct {
	Forms *struct {
		LoginFormDetails *[]struct {
			// Action Form action URL
			Action *string `json:"action,omitempty"`

			// Fields Form field names
			Fields *[]string `json:"fields,omitempty"`

			// Method Form submission method
			Method *AnalysisDataFormsLoginFormDetailsMethod `json:"method,omitempty"`
		} `json:"login_form_details,omitempty"`

		// LoginFormsDetected Number of login forms detected
		LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

		// TotalCount Total number of forms found
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"forms,omitempty"`
	HeadingCounts *struct {
		H1 *int `json:"h1,omitempty"`
		H2 *int `json:"h2,omitempty"`
		H3 *int `json:"h3,omitempty"`
		H4 *int `json:"h4,omitempty"`
		H5 *int `json:"h5,omitempty"`
		H6 *int `json:"h6,omitempty"`
	} `json:"heading_counts,omitempty"`

	// HtmlVersion Detected HTML version
	HtmlVersion *string `json:"html_version,omitempty"`
	Links       *struct {
		// ExternalCount Number of external links
		ExternalCount     *int `json:"external_count,omitempty"`
		InaccessibleLinks *[]struct {
			// Error Error description
			Error *string `json:"error,omitempty"`

			// StatusCode HTTP status code received
			StatusCode *int    `json:"status_code,omitempty"`
			Url        *string `json:"url,omitempty"`
		} `json:"inaccessible_links,omitempty"`

		// InternalCount Number of internal links
		InternalCount *int `json:"internal_count,omitempty"`

		// TotalCount Total number of links
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"links,omitempty"`

	// Title Page title
	Title *string `json:"title,omitempty"`
}

// AnalysisDataFormsLoginFormDetailsMethod Form submission method
type AnalysisDataFormsLoginFormDetailsMethod string

// AnalysisError defines model for AnalysisError.
type AnalysisError struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type
	Error *string `json:"error,omitempty"`

	// ErrorMessage Human-readable error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// HttpStatusCode HTTP status code from the target URL (if applicable)
	HttpStatusCode *int                 `json:"http_status_code,omitempty"`
	Status         *AnalysisErrorStatus `json:"status,omitempty"`
}

// AnalysisErrorStatus defines model for AnalysisError.Status.
type AnalysisErrorStatus string

// AnalysisInProgress defines model for AnalysisInProgress.
type AnalysisInProgress struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CurrentStep Current analysis step
	CurrentStep *string `json:"current_step,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Progress Progress percentage
	Progress *int                      `json:"progress,omitempty"`
	Status   *AnalysisInProgressStatus `json:"status,omitempty"`
}

// AnalysisInProgressStatus defines model for AnalysisInProgress.Status.
type AnalysisInProgressStatus string

// AnalysisResponse defines model for AnalysisResponse.
type AnalysisResponse struct {
	// AnalysisId Unique identifier for the analysis
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CreatedAt When the analysis was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Status Current status of the analysis
	Status *AnalysisResponseStatus `json:"status,omitempty"`

	// Url The URL being analyzed
	Url *string `json:"url,omitempty"`
}

// AnalysisResponseStatus Current status of the analysis
type AnalysisResponseStatus string

// AnalysisResult defines model for AnalysisResult.
type AnalysisResult struct {
	AnalysisId  *openapi_types.UUID `json:"analysis_id,omitempty"`
	CompletedAt *time.Time          `json:"completed_at,omitempty"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`

	// Duration Analysis duration
	Duration *string `json:"duration,omitempty"`
	Results  *struct {
		Forms *struct {
			LoginFormDetails *[]struct {
				// Action Form action URL
				Action *string `json:"action,omitempty"`

				// Fields Form field names
				Fields *[]string `json:"fields,omitempty"`

				// Method Form submission method
				Method *AnalysisResultResultsFormsLoginFormDetailsMethod `json:"method,omitempty"`
			} `json:"login_form_details,omitempty"`

			// LoginFormsDetected Number of login forms detected
			LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

			// TotalCount Total number of forms found
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"forms,omitempty"`
		HeadingCounts *struct {
			H1 *int `json:"h1,omitempty"`
			H2 *int `json:"h2,omitempty"`
			H3 *int `json:"h3,omitempty"`
			H4 *int `json:"h4,omitempty"`
			H5 *int `json:"h5,omitempty"`
			H6 *int `json:"h6,omitempty"`
		} `json:"heading_counts,omitempty"`

		// HtmlVersion Detected HTML version
		HtmlVersion *string `json:"html_version,omitempty"`
		Links       *struct {
			// ExternalCount Number of external links
			ExternalCount     *int `json:"external_count,omitempty"`
			InaccessibleLinks *[]struct {
				// Error Error description
				Error *string `json:"error,omitempty"`

				// StatusCode HTTP status code received
				StatusCode *int    `json:"status_code,omitempty"`
				Url        *string `json:"url,omitempty"`
			} `json:"inaccessible_links,omitempty"`

			// InternalCount Number of internal links
			InternalCount *int `json:"internal_count,omitempty"`

			// TotalCount Total number of links
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"links,omitempty"`

		// Title Page title
		Title *string `json:"title,omitempty"`
	} `json:"results,omitempty"`
	Status *AnalysisResultStatus `json:"status,omitempty"`
	Url    *string               `json:"url,omitempty"`
}

// AnalysisResultResultsFormsLoginFormDetailsMethod Form submission method
type AnalysisResultResultsFormsLoginFormDetailsMethod string

// AnalysisResultStatus defines model for AnalysisResult.Status.
type AnalysisResultStatus string

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// CacheDependencyCheck defines model for CacheDependencyCheck.
type CacheDependencyCheck struct {
	Details *CacheDependencyCheck_Details `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status CacheDependencyCheckStatus `json:"status"`
}

// CacheDependencyCheck_Details defines model for CacheDependencyCheck.Details.
type CacheDependencyCheck_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CacheDependencyCheckStatus Health status of the dependency
type CacheDependencyCheckStatus string

// DependencyCheck defines model for DependencyCheck.
type DependencyCheck struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status DependencyCheckStatus `json:"status"`
}

// DependencyCheckStatus Health status of the dependency
type DependencyCheckStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// FormAnalysis defines model for FormAnalysis.
type FormAnalysis struct {
	LoginFormDetails *[]struct {
		// Action Form action URL
		Action *string `json:"action,omitempty"`

		// Fields Form field names
		Fields *[]string `json:"fields,omitempty"`

		// Method Form submission method
		Method *FormAnalysisLoginFormDetailsMethod `json:"method,omitempty"`
	} `json:"login_form_details,omitempty"`

	// LoginFormsDetected Number of login forms detected
	LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

	// TotalCount Total number of forms found
	TotalCount *int `json:"total_count,omitempty"`
}

// FormAnalysisLoginFormDetailsMethod Form submission method
type FormAnalysisLoginFormDetailsMethod string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Checks Status of individual dependencies
	Checks HealthResponse_Checks `json:"checks"`

	// Status Overall health status - OK only if all dependencies are healthy
	Status HealthResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Uptime Service uptime in seconds
	Uptime *float32 `json:"uptime,omitempty"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// HealthResponseChecksStatus Health status of the dependency
type HealthResponseChecksStatus string

// HealthResponse_Checks_Cache_Details defines model for HealthResponse.Checks.Cache.Details.
type HealthResponse_Checks_Cache_Details struct {
	PoolStats *struct {
		// Hits Number of times free connection was found in the pool
		Hits int `json:"hits"`

		// IdleConnections Number of idle connections in the pool
		IdleConnections int `json:"idle_connections"`

		// Misses Number of times free connection was NOT found in the pool
		Misses int `json:"misses"`

		// StaleConnections Number of stale connections removed from the pool
		StaleConnections int `json:"stale_connections"`

		// Timeouts Number of times a wait timeout occurred
		Timeouts int `json:"timeouts"`

		// TotalConnections Number of total connections in the pool
		TotalConnections int `json:"total_connections"`

		// WaitCount Number of times a connection was waited
		WaitCount int `json:"wait_count"`

		// WaitDurationNs Total time spent for waiting a connection in nanoseconds
		WaitDurationNs int `json:"wait_duration_ns"`
	} `json:"pool_stats,omitempty"`

	// TotalKeys Total number of keys in cache
	TotalKeys            *int                   `json:"total_keys,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HealthResponseChecksCacheStatus Health status of the dependency
type HealthResponseChecksCacheStatus string

// HealthResponseChecksQueueStatus Health status of the dependency
type HealthResponseChecksQueueStatus string

// HealthResponseChecksStorageStatus Health status of the dependency
type HealthResponseChecksStorageStatus string

// HealthResponse_Checks Status of individual dependencies
type HealthResponse_Checks struct {
	Cache *struct {
		Details *HealthResponse_Checks_Cache_Details `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// HealthResponseStatus Overall health status - OK only if all dependencies are healthy
type HealthResponseStatus string

// InaccessibleLink defines model for InaccessibleLink.
type InaccessibleLink struct {
	// Error Error description
	Error *string `json:"error,omitempty"`

	// StatusCode HTTP status code received
	StatusCode *int    `json:"status_code,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// LinkAnalysis defines model for LinkAnalysis.
type LinkAnalysis struct {
	// ExternalCount Number of external links
	ExternalCount     *int `json:"external_count,omitempty"`
	InaccessibleLinks *[]struct {
		// Error Error description
		Error *string `json:"error,omitempty"`

		// StatusCode HTTP status code received
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"inaccessible_links,omitempty"`

	// InternalCount Number of internal links
	InternalCount *int `json:"internal_count,omitempty"`

	// TotalCount Total number of links
	TotalCount *int `json:"total_count,omitempty"`
}

// LivenessResponse defines model for LivenessResponse.
type LivenessResponse struct {
	// Status Service liveness status
	Status LivenessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version API version
	Version string `json:"version"`
}

// LivenessResponseStatus Service liveness status
type LivenessResponseStatus string

// LoginForm defines model for LoginForm.
type LoginForm struct {
	// Action Form action URL
	Action *string `json:"action,omitempty"`

	// Fields Form field names
	Fields *[]string `json:"fields,omitempty"`

	// Method Form submission method
	Method *LoginFormMethod `json:"method,omitempty"`
}

// LoginFormMethod Form submission method
type LoginFormMethod string

// Pagination defines model for Pagination.
type Pagination struct {
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
	Limit       *int  `json:"limit,omitempty"`
	Page        *int  `json:"page,omitempty"`
	TotalCount  *int  `json:"total_count,omitempty"`
	TotalPages  *int  `json:"total_pages,omitempty"`
}

// PoolStats defines model for PoolStats.
type PoolStats struct {
	// Hits Number of times free connection was found in the pool
	Hits int `json:"hits"`

	// IdleConnections Number of idle connections in the pool
	IdleConnections int `json:"idle_connections"`

	// Misses Number of times free connection was NOT found in the pool
	Misses int `json:"misses"`

	// StaleConnections Number of stale connections removed from the pool
	StaleConnections int `json:"stale_connections"`

	// Timeouts Number of times a wait timeout occurred
	Timeouts int `json:"timeouts"`

	// TotalConnections Number of total connections in the pool
	TotalConnections int `json:"total_connections"`

	// WaitCount Number of times a connection was waited
	WaitCount int `json:"wait_count"`

	// WaitDurationNs Total time spent for waiting a connection in nanoseconds
	WaitDurationNs int `json:"wait_duration_ns"`
}

// ReadinessResponse defines model for ReadinessResponse.
type ReadinessResponse struct {
	// Checks Status of individual dependencies
	Checks ReadinessResponse_Checks `json:"checks"`

	// Status Overall readiness status - ready only if all dependencies are healthy
	Status ReadinessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// ReadinessResponseChecksStatus Health status of the dependency
type ReadinessResponseChecksStatus string

// ReadinessResponseChecksCacheStatus Health status of the dependency
type ReadinessResponseChecksCacheStatus string

// ReadinessResponseChecksQueueStatus Health status of the dependency
type ReadinessResponseChecksQueueStatus string

// ReadinessResponseChecksStorageStatus Health status of the dependency
type ReadinessResponseChecksStorageStatus string

// ReadinessResponse_Checks Status of individual dependencies
type ReadinessResponse_Checks struct {
	Cache *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// Status Health status of the dependency
		Status ReadinessResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// ReadinessResponseStatus Overall readiness status - ready only if all dependencies are healthy
type ReadinessResponseStatus string

// HealthResponseV1DependencyCheck defines model for health-response.v1_DependencyCheck.
type HealthResponseV1DependencyCheck struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseV1DependencyCheckStatus `json:"status"`
}

// HealthResponseV1DependencyCheckStatus Health status of the dependency
type HealthResponseV1DependencyCheckStatus string

// ApiVersionHeader defines model for ApiVersionHeader.
type ApiVersionHeader string

// BadRequest defines model for bad_request.
type BadRequest struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// NotFound defines model for not_found.
type NotFound struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// RateLimit defines model for rate_limit.
type RateLimit struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// ServerError defines model for server_error.
type ServerError struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// GetAnalysisParams defines parameters for GetAnalysis.
type GetAnalysisParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisParamsAPIVersion defines parameters for GetAnalysis.
type GetAnalysisParamsAPIVersion string

// GetAnalysisEventsParams defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisEventsParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisEventsParamsAPIVersion defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParamsAPIVersion string

// AnalyzeURLJSONBody defines parameters for AnalyzeURL.
type AnalyzeURLJSONBody struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze (supports absolute URLs, relative paths, and internal links)
	Url string `json:"url"`
}

// AnalyzeURLParams defines parameters for AnalyzeURL.
type AnalyzeURLParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *AnalyzeURLParamsAPIVersion `json:"API-Version,omitempty"`
}

// AnalyzeURLParamsAPIVersion defines parameters for AnalyzeURL.
type AnalyzeURLParamsAPIVersion string

// AnalyzeURLJSONRequestBody defines body for AnalyzeURL for application/json ContentType.
type AnalyzeURLJSONRequestBody AnalyzeURLJSONBody

// Getter for additional properties for CacheDependencyCheck_Details. Returns the specified
// element and whether it was found
func (a CacheDependencyCheck_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CacheDependencyCheck_Details
func (a *CacheDependencyCheck_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a *CacheDependencyCheck_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CacheDependencyCheck_Details to handle AdditionalProperties
func (a CacheDependencyCheck_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks_Cache_Details. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks_Cache_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks_Cache_Details
func (a *HealthResponse_Checks_Cache_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a *HealthResponse_Checks_Cache_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pool_stats"]; found {
		err = json.Unmarshal(raw, &a.PoolStats)
		if err != nil {
			return fmt.Errorf("error reading 'pool_stats': %w", err)
		}
		delete(object, "pool_stats")
	}

	if raw, found := object["total_keys"]; found {
		err = json.Unmarshal(raw, &a.TotalKeys)
		if err != nil {
			return fmt.Errorf("error reading 'total_keys': %w", err)
		}
		delete(object, "total_keys")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks_Cache_Details to handle AdditionalProperties
func (a HealthResponse_Checks_Cache_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PoolStats != nil {
		object["pool_stats"], err = json.Marshal(a.PoolStats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pool_stats': %w", err)
		}
	}

	if a.TotalKeys != nil {
		object["total_keys"], err = json.Marshal(a.TotalKeys)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'total_keys': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HealthResponse_Checks. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks) Get(fieldName string) (value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks
func (a *HealthResponse_Checks) Set(fieldName string, value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a *HealthResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Details Additional dependency-specific information
				Details *map[string]interface{} `json:"details,omitempty"`

				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// ResponseTime Response time in milliseconds
				ResponseTime *float32 `json:"response_time,omitempty"`

				// Status Health status of the dependency
				Status HealthResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a HealthResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReadinessResponse_Checks. Returns the specified
// element and whether it was found
func (a ReadinessResponse_Checks) Get(fieldName string) (value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReadinessResponse_Checks
func (a *ReadinessResponse_Checks) Set(fieldName string, value struct {
	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a *ReadinessResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// Status Health status of the dependency
				Status ReadinessResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a ReadinessResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get analysis result
	// (GET /v1/analysis/{analysisId})
	GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams)
	// Get real-time analysis progress
	// (GET /v1/analysis/{analysisId}/events)
	GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams)
	// Analyze a web page
	// (POST /v1/analyze)
	AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams)
	// Health check
	// (GET /v1/health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Liveness probe
	// (GET /v1/liveness)
	LivenessCheck(w http.ResponseWriter, r *http.Request)
	// Readiness probe
	// (GET /v1/readiness)
	ReadinessCheck(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get analysis result
// (GET /v1/analysis/{analysisId})
func (_ Unimplemented) GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time analysis progress
// (GET /v1/analysis/{analysisId}/events)
func (_ Unimplemented) GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Analyze a web page
// (POST /v1/analyze)
func (_ Unimplemented) AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /v1/health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Liveness probe
// (GET /v1/liveness)
func (_ Unimplemented) LivenessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Readiness probe
// (GET /v1/readiness)
func (_ Unimplemented) ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAnalysis operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysis(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysis(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnalysisEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysisEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisEventsParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisEventsParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysisEvents(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AnalyzeURL operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeURL(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeURLParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion AnalyzeURLParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeURL(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LivenessCheck operation middleware
func (siw *ServerInterfaceWrapper) LivenessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LivenessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadinessCheck operation middleware
func (siw *ServerInterfaceWrapper) ReadinessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadinessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}", wrapper.GetAnalysis)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}/events", wrapper.GetAnalysisEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/analyze", wrapper.AnalyzeURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/liveness", wrapper.LivenessCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/readiness", wrapper.ReadinessCheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d5imnlTqNfRGsmt49+Hu/wcAAP//OrsqjZ0HAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
