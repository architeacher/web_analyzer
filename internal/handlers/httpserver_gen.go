// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	PasetoAuthScopes = "PasetoAuth.Scopes"
)

// Defines values for AnalysisDataFormsLoginFormDetailsMethod.
const (
	AnalysisDataFormsLoginFormDetailsMethodPOST AnalysisDataFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisErrorStatus.
const (
	AnalysisErrorStatusFailed AnalysisErrorStatus = "failed"
)

// Defines values for AnalysisInProgressStatus.
const (
	InProgress AnalysisInProgressStatus = "in_progress"
)

// Defines values for AnalysisResponseStatus.
const (
	AnalysisResponseStatusCompleted  AnalysisResponseStatus = "completed"
	AnalysisResponseStatusFailed     AnalysisResponseStatus = "failed"
	AnalysisResponseStatusInProgress AnalysisResponseStatus = "in_progress"
	AnalysisResponseStatusRequested  AnalysisResponseStatus = "requested"
)

// Defines values for AnalysisResultResultsFormsLoginFormDetailsMethod.
const (
	AnalysisResultResultsFormsLoginFormDetailsMethodPOST AnalysisResultResultsFormsLoginFormDetailsMethod = "POST"
)

// Defines values for AnalysisResultStatus.
const (
	Completed AnalysisResultStatus = "completed"
)

// Defines values for DependencyCheckStatus.
const (
	DependencyCheckStatusHealthy   DependencyCheckStatus = "healthy"
	DependencyCheckStatusUnhealthy DependencyCheckStatus = "unhealthy"
	DependencyCheckStatusUnknown   DependencyCheckStatus = "unknown"
)

// Defines values for FormAnalysisLoginFormDetailsMethod.
const (
	FormAnalysisLoginFormDetailsMethodPOST FormAnalysisLoginFormDetailsMethod = "POST"
)

// Defines values for HealthResponseChecksStatus.
const (
	HealthResponseChecksStatusHealthy   HealthResponseChecksStatus = "healthy"
	HealthResponseChecksStatusUnhealthy HealthResponseChecksStatus = "unhealthy"
	HealthResponseChecksStatusUnknown   HealthResponseChecksStatus = "unknown"
)

// Defines values for HealthResponseChecksCacheStatus.
const (
	HealthResponseChecksCacheStatusHealthy   HealthResponseChecksCacheStatus = "healthy"
	HealthResponseChecksCacheStatusUnhealthy HealthResponseChecksCacheStatus = "unhealthy"
	HealthResponseChecksCacheStatusUnknown   HealthResponseChecksCacheStatus = "unknown"
)

// Defines values for HealthResponseChecksQueueStatus.
const (
	HealthResponseChecksQueueStatusHealthy   HealthResponseChecksQueueStatus = "healthy"
	HealthResponseChecksQueueStatusUnhealthy HealthResponseChecksQueueStatus = "unhealthy"
	HealthResponseChecksQueueStatusUnknown   HealthResponseChecksQueueStatus = "unknown"
)

// Defines values for HealthResponseChecksStorageStatus.
const (
	HealthResponseChecksStorageStatusHealthy   HealthResponseChecksStorageStatus = "healthy"
	HealthResponseChecksStorageStatusUnhealthy HealthResponseChecksStorageStatus = "unhealthy"
	HealthResponseChecksStorageStatusUnknown   HealthResponseChecksStorageStatus = "unknown"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusDOWN        HealthResponseStatus = "DOWN"
	HealthResponseStatusMAINTENANCE HealthResponseStatus = "MAINTENANCE"
	HealthResponseStatusOK          HealthResponseStatus = "OK"
)

// Defines values for LivenessResponseStatus.
const (
	LivenessResponseStatusDOWN        LivenessResponseStatus = "DOWN"
	LivenessResponseStatusMAINTENANCE LivenessResponseStatus = "MAINTENANCE"
	LivenessResponseStatusOK          LivenessResponseStatus = "OK"
)

// Defines values for LoginFormMethod.
const (
	LoginFormMethodPOST LoginFormMethod = "POST"
)

// Defines values for ReadinessResponseChecksStatus.
const (
	ReadinessResponseChecksStatusHealthy   ReadinessResponseChecksStatus = "healthy"
	ReadinessResponseChecksStatusUnhealthy ReadinessResponseChecksStatus = "unhealthy"
	ReadinessResponseChecksStatusUnknown   ReadinessResponseChecksStatus = "unknown"
)

// Defines values for ReadinessResponseChecksCacheStatus.
const (
	ReadinessResponseChecksCacheStatusHealthy   ReadinessResponseChecksCacheStatus = "healthy"
	ReadinessResponseChecksCacheStatusUnhealthy ReadinessResponseChecksCacheStatus = "unhealthy"
	ReadinessResponseChecksCacheStatusUnknown   ReadinessResponseChecksCacheStatus = "unknown"
)

// Defines values for ReadinessResponseChecksQueueStatus.
const (
	ReadinessResponseChecksQueueStatusHealthy   ReadinessResponseChecksQueueStatus = "healthy"
	ReadinessResponseChecksQueueStatusUnhealthy ReadinessResponseChecksQueueStatus = "unhealthy"
	ReadinessResponseChecksQueueStatusUnknown   ReadinessResponseChecksQueueStatus = "unknown"
)

// Defines values for ReadinessResponseChecksStorageStatus.
const (
	ReadinessResponseChecksStorageStatusHealthy   ReadinessResponseChecksStorageStatus = "healthy"
	ReadinessResponseChecksStorageStatusUnhealthy ReadinessResponseChecksStorageStatus = "unhealthy"
	ReadinessResponseChecksStorageStatusUnknown   ReadinessResponseChecksStorageStatus = "unknown"
)

// Defines values for ReadinessResponseStatus.
const (
	DOWN        ReadinessResponseStatus = "DOWN"
	MAINTENANCE ReadinessResponseStatus = "MAINTENANCE"
	OK          ReadinessResponseStatus = "OK"
)

// Defines values for HealthResponseV1DependencyCheckStatus.
const (
	HealthResponseV1DependencyCheckStatusHealthy   HealthResponseV1DependencyCheckStatus = "healthy"
	HealthResponseV1DependencyCheckStatusUnhealthy HealthResponseV1DependencyCheckStatus = "unhealthy"
	HealthResponseV1DependencyCheckStatusUnknown   HealthResponseV1DependencyCheckStatus = "unknown"
)

// Defines values for ApiVersionHeader.
const (
	ApiVersionHeaderV1 ApiVersionHeader = "v1"
)

// Defines values for GetAnalysisParamsAPIVersion.
const (
	GetAnalysisParamsAPIVersionV1 GetAnalysisParamsAPIVersion = "v1"
)

// Defines values for GetAnalysisEventsParamsAPIVersion.
const (
	GetAnalysisEventsParamsAPIVersionV1 GetAnalysisEventsParamsAPIVersion = "v1"
)

// Defines values for AnalyzeURLParamsAPIVersion.
const (
	AnalyzeURLParamsAPIVersionV1 AnalyzeURLParamsAPIVersion = "v1"
)

// AnalysisData defines model for AnalysisData.
type AnalysisData struct {
	Forms *struct {
		LoginFormDetails *[]struct {
			// Action Form action URL
			Action *string `json:"action,omitempty"`

			// Fields Form field names
			Fields *[]string `json:"fields,omitempty"`

			// Method Form submission method
			Method *AnalysisDataFormsLoginFormDetailsMethod `json:"method,omitempty"`
		} `json:"login_form_details,omitempty"`

		// LoginFormsDetected Number of login forms detected
		LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

		// TotalCount Total number of forms found
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"forms,omitempty"`
	HeadingCounts *struct {
		H1 *int `json:"h1,omitempty"`
		H2 *int `json:"h2,omitempty"`
		H3 *int `json:"h3,omitempty"`
		H4 *int `json:"h4,omitempty"`
		H5 *int `json:"h5,omitempty"`
		H6 *int `json:"h6,omitempty"`
	} `json:"heading_counts,omitempty"`

	// HtmlVersion Detected HTML version
	HtmlVersion *string `json:"html_version,omitempty"`
	Links       *struct {
		// ExternalCount Number of external links
		ExternalCount     *int `json:"external_count,omitempty"`
		InaccessibleLinks *[]struct {
			// Error Error description
			Error *string `json:"error,omitempty"`

			// StatusCode HTTP status code received
			StatusCode *int    `json:"status_code,omitempty"`
			Url        *string `json:"url,omitempty"`
		} `json:"inaccessible_links,omitempty"`

		// InternalCount Number of internal links
		InternalCount *int `json:"internal_count,omitempty"`

		// TotalCount Total number of links
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"links,omitempty"`

	// Title Page title
	Title *string `json:"title,omitempty"`
}

// AnalysisDataFormsLoginFormDetailsMethod Form submission method
type AnalysisDataFormsLoginFormDetailsMethod string

// AnalysisError defines model for AnalysisError.
type AnalysisError struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error type
	Error *string `json:"error,omitempty"`

	// ErrorMessage Human-readable error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// HttpStatusCode HTTP status code from the target URL (if applicable)
	HttpStatusCode *int                 `json:"http_status_code,omitempty"`
	Status         *AnalysisErrorStatus `json:"status,omitempty"`
}

// AnalysisErrorStatus defines model for AnalysisError.Status.
type AnalysisErrorStatus string

// AnalysisInProgress defines model for AnalysisInProgress.
type AnalysisInProgress struct {
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CurrentStep Current analysis step
	CurrentStep *string `json:"current_step,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Progress Progress percentage
	Progress *int                      `json:"progress,omitempty"`
	Status   *AnalysisInProgressStatus `json:"status,omitempty"`
}

// AnalysisInProgressStatus defines model for AnalysisInProgress.Status.
type AnalysisInProgressStatus string

// AnalysisResponse defines model for AnalysisResponse.
type AnalysisResponse struct {
	// AnalysisId Unique identifier for the analysis
	AnalysisId *openapi_types.UUID `json:"analysis_id,omitempty"`

	// CreatedAt When the analysis was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EstimatedCompletionTime Estimated time to completion
	EstimatedCompletionTime *string `json:"estimated_completion_time,omitempty"`

	// Status Current status of the analysis
	Status *AnalysisResponseStatus `json:"status,omitempty"`

	// Url The URL being analyzed
	Url *string `json:"url,omitempty"`
}

// AnalysisResponseStatus Current status of the analysis
type AnalysisResponseStatus string

// AnalysisResult defines model for AnalysisResult.
type AnalysisResult struct {
	AnalysisId  *openapi_types.UUID `json:"analysis_id,omitempty"`
	CompletedAt *time.Time          `json:"completed_at,omitempty"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`

	// Duration Analysis duration
	Duration *string `json:"duration,omitempty"`
	Results  *struct {
		Forms *struct {
			LoginFormDetails *[]struct {
				// Action Form action URL
				Action *string `json:"action,omitempty"`

				// Fields Form field names
				Fields *[]string `json:"fields,omitempty"`

				// Method Form submission method
				Method *AnalysisResultResultsFormsLoginFormDetailsMethod `json:"method,omitempty"`
			} `json:"login_form_details,omitempty"`

			// LoginFormsDetected Number of login forms detected
			LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

			// TotalCount Total number of forms found
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"forms,omitempty"`
		HeadingCounts *struct {
			H1 *int `json:"h1,omitempty"`
			H2 *int `json:"h2,omitempty"`
			H3 *int `json:"h3,omitempty"`
			H4 *int `json:"h4,omitempty"`
			H5 *int `json:"h5,omitempty"`
			H6 *int `json:"h6,omitempty"`
		} `json:"heading_counts,omitempty"`

		// HtmlVersion Detected HTML version
		HtmlVersion *string `json:"html_version,omitempty"`
		Links       *struct {
			// ExternalCount Number of external links
			ExternalCount     *int `json:"external_count,omitempty"`
			InaccessibleLinks *[]struct {
				// Error Error description
				Error *string `json:"error,omitempty"`

				// StatusCode HTTP status code received
				StatusCode *int    `json:"status_code,omitempty"`
				Url        *string `json:"url,omitempty"`
			} `json:"inaccessible_links,omitempty"`

			// InternalCount Number of internal links
			InternalCount *int `json:"internal_count,omitempty"`

			// TotalCount Total number of links
			TotalCount *int `json:"total_count,omitempty"`
		} `json:"links,omitempty"`

		// Title Page title
		Title *string `json:"title,omitempty"`
	} `json:"results,omitempty"`
	Status *AnalysisResultStatus `json:"status,omitempty"`
	Url    *string               `json:"url,omitempty"`
}

// AnalysisResultResultsFormsLoginFormDetailsMethod Form submission method
type AnalysisResultResultsFormsLoginFormDetailsMethod string

// AnalysisResultStatus defines model for AnalysisResult.Status.
type AnalysisResultStatus string

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze
	Url string `json:"url"`
}

// DependencyCheck defines model for DependencyCheck.
type DependencyCheck struct {
	// Status Health status of the dependency
	Status DependencyCheckStatus `json:"status"`
}

// DependencyCheckStatus Health status of the dependency
type DependencyCheckStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// FormAnalysis defines model for FormAnalysis.
type FormAnalysis struct {
	LoginFormDetails *[]struct {
		// Action Form action URL
		Action *string `json:"action,omitempty"`

		// Fields Form field names
		Fields *[]string `json:"fields,omitempty"`

		// Method Form submission method
		Method *FormAnalysisLoginFormDetailsMethod `json:"method,omitempty"`
	} `json:"login_form_details,omitempty"`

	// LoginFormsDetected Number of login forms detected
	LoginFormsDetected *int `json:"login_forms_detected,omitempty"`

	// TotalCount Total number of forms found
	TotalCount *int `json:"total_count,omitempty"`
}

// FormAnalysisLoginFormDetailsMethod Form submission method
type FormAnalysisLoginFormDetailsMethod string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Checks Status of individual dependencies
	Checks HealthResponse_Checks `json:"checks"`

	// Status Overall health status - OK only if all dependencies are healthy
	Status HealthResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Uptime Service uptime in seconds
	Uptime *float32 `json:"uptime,omitempty"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// HealthResponseChecksStatus Health status of the dependency
type HealthResponseChecksStatus string

// HealthResponseChecksCacheStatus Health status of the dependency
type HealthResponseChecksCacheStatus string

// HealthResponseChecksQueueStatus Health status of the dependency
type HealthResponseChecksQueueStatus string

// HealthResponseChecksStorageStatus Health status of the dependency
type HealthResponseChecksStorageStatus string

// HealthResponse_Checks Status of individual dependencies
type HealthResponse_Checks struct {
	Cache *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Details Additional dependency-specific information
		Details *map[string]interface{} `json:"details,omitempty"`

		// Error Error message if the dependency is unhealthy
		Error *string `json:"error,omitempty"`

		// LastChecked When this dependency was last checked
		LastChecked *time.Time `json:"last_checked,omitempty"`

		// ResponseTime Response time in milliseconds
		ResponseTime *float32 `json:"response_time,omitempty"`

		// Status Health status of the dependency
		Status HealthResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// HealthResponseStatus Overall health status - OK only if all dependencies are healthy
type HealthResponseStatus string

// InaccessibleLink defines model for InaccessibleLink.
type InaccessibleLink struct {
	// Error Error description
	Error *string `json:"error,omitempty"`

	// StatusCode HTTP status code received
	StatusCode *int    `json:"status_code,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// LinkAnalysis defines model for LinkAnalysis.
type LinkAnalysis struct {
	// ExternalCount Number of external links
	ExternalCount     *int `json:"external_count,omitempty"`
	InaccessibleLinks *[]struct {
		// Error Error description
		Error *string `json:"error,omitempty"`

		// StatusCode HTTP status code received
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"inaccessible_links,omitempty"`

	// InternalCount Number of internal links
	InternalCount *int `json:"internal_count,omitempty"`

	// TotalCount Total number of links
	TotalCount *int `json:"total_count,omitempty"`
}

// LivenessResponse defines model for LivenessResponse.
type LivenessResponse struct {
	// Status Service liveness status
	Status LivenessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`
}

// LivenessResponseStatus Service liveness status
type LivenessResponseStatus string

// LoginForm defines model for LoginForm.
type LoginForm struct {
	// Action Form action URL
	Action *string `json:"action,omitempty"`

	// Fields Form field names
	Fields *[]string `json:"fields,omitempty"`

	// Method Form submission method
	Method *LoginFormMethod `json:"method,omitempty"`
}

// LoginFormMethod Form submission method
type LoginFormMethod string

// Pagination defines model for Pagination.
type Pagination struct {
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
	Limit       *int  `json:"limit,omitempty"`
	Page        *int  `json:"page,omitempty"`
	TotalCount  *int  `json:"total_count,omitempty"`
	TotalPages  *int  `json:"total_pages,omitempty"`
}

// ReadinessResponse defines model for ReadinessResponse.
type ReadinessResponse struct {
	// Checks Status of individual dependencies
	Checks ReadinessResponse_Checks `json:"checks"`

	// Status Overall readiness status - ready only if all dependencies are healthy
	Status ReadinessResponseStatus `json:"status"`

	// Timestamp ISO 8601 timestamp when the check was performed
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// ReadinessResponseChecksStatus Health status of the dependency
type ReadinessResponseChecksStatus string

// ReadinessResponseChecksCacheStatus Health status of the dependency
type ReadinessResponseChecksCacheStatus string

// ReadinessResponseChecksQueueStatus Health status of the dependency
type ReadinessResponseChecksQueueStatus string

// ReadinessResponseChecksStorageStatus Health status of the dependency
type ReadinessResponseChecksStorageStatus string

// ReadinessResponse_Checks Status of individual dependencies
type ReadinessResponse_Checks struct {
	Cache *struct {
		// Status Health status of the dependency
		Status ReadinessResponseChecksCacheStatus `json:"status"`
	} `json:"cache,omitempty"`
	Queue *struct {
		// Status Health status of the dependency
		Status ReadinessResponseChecksQueueStatus `json:"status"`
	} `json:"queue,omitempty"`
	Storage *struct {
		// Status Health status of the dependency
		Status ReadinessResponseChecksStorageStatus `json:"status"`
	} `json:"storage,omitempty"`
	AdditionalProperties map[string]struct {
		// Status Health status of the dependency
		Status ReadinessResponseChecksStatus `json:"status"`
	} `json:"-"`
}

// ReadinessResponseStatus Overall readiness status - ready only if all dependencies are healthy
type ReadinessResponseStatus string

// HealthResponseV1DependencyCheck defines model for health-response.v1_DependencyCheck.
type HealthResponseV1DependencyCheck struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseV1DependencyCheckStatus `json:"status"`
}

// HealthResponseV1DependencyCheckStatus Health status of the dependency
type HealthResponseV1DependencyCheckStatus string

// ApiVersionHeader defines model for ApiVersionHeader.
type ApiVersionHeader string

// BadRequest defines model for bad_request.
type BadRequest struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// NotFound defines model for not_found.
type NotFound struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// RateLimit defines model for rate_limit.
type RateLimit struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// ServerError defines model for server_error.
type ServerError struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// RetryAfter Seconds to wait before retrying (for rate limit errors)
	RetryAfter *int `json:"retry_after,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int       `json:"status_code,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
}

// GetAnalysisParams defines parameters for GetAnalysis.
type GetAnalysisParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisParamsAPIVersion defines parameters for GetAnalysis.
type GetAnalysisParamsAPIVersion string

// GetAnalysisEventsParams defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *GetAnalysisEventsParamsAPIVersion `json:"API-Version,omitempty"`
}

// GetAnalysisEventsParamsAPIVersion defines parameters for GetAnalysisEvents.
type GetAnalysisEventsParamsAPIVersion string

// AnalyzeURLJSONBody defines parameters for AnalyzeURL.
type AnalyzeURLJSONBody struct {
	Options *struct {
		// CheckLinks Whether to check link accessibility
		CheckLinks *bool `json:"check_links,omitempty"`

		// DetectForms Whether to detect login forms
		DetectForms *bool `json:"detect_forms,omitempty"`

		// IncludeHeadings Whether to include heading analysis
		IncludeHeadings *bool `json:"include_headings,omitempty"`

		// Timeout Request timeout in seconds
		Timeout *int `json:"timeout,omitempty"`
	} `json:"options,omitempty"`

	// Url The URL to analyze
	Url string `json:"url"`
}

// AnalyzeURLParams defines parameters for AnalyzeURL.
type AnalyzeURLParams struct {
	// APIVersion API version to use for this request. If not specified, defaults to v1.
	// Supported versions: v1
	APIVersion *AnalyzeURLParamsAPIVersion `json:"API-Version,omitempty"`
}

// AnalyzeURLParamsAPIVersion defines parameters for AnalyzeURL.
type AnalyzeURLParamsAPIVersion string

// AnalyzeURLJSONRequestBody defines body for AnalyzeURL for application/json ContentType.
type AnalyzeURLJSONRequestBody AnalyzeURLJSONBody

// Getter for additional properties for HealthResponse_Checks. Returns the specified
// element and whether it was found
func (a HealthResponse_Checks) Get(fieldName string) (value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HealthResponse_Checks
func (a *HealthResponse_Checks) Set(fieldName string, value struct {
	// Details Additional dependency-specific information
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message if the dependency is unhealthy
	Error *string `json:"error,omitempty"`

	// LastChecked When this dependency was last checked
	LastChecked *time.Time `json:"last_checked,omitempty"`

	// ResponseTime Response time in milliseconds
	ResponseTime *float32 `json:"response_time,omitempty"`

	// Status Health status of the dependency
	Status HealthResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a *HealthResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Details Additional dependency-specific information
			Details *map[string]interface{} `json:"details,omitempty"`

			// Error Error message if the dependency is unhealthy
			Error *string `json:"error,omitempty"`

			// LastChecked When this dependency was last checked
			LastChecked *time.Time `json:"last_checked,omitempty"`

			// ResponseTime Response time in milliseconds
			ResponseTime *float32 `json:"response_time,omitempty"`

			// Status Health status of the dependency
			Status HealthResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Details Additional dependency-specific information
				Details *map[string]interface{} `json:"details,omitempty"`

				// Error Error message if the dependency is unhealthy
				Error *string `json:"error,omitempty"`

				// LastChecked When this dependency was last checked
				LastChecked *time.Time `json:"last_checked,omitempty"`

				// ResponseTime Response time in milliseconds
				ResponseTime *float32 `json:"response_time,omitempty"`

				// Status Health status of the dependency
				Status HealthResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HealthResponse_Checks to handle AdditionalProperties
func (a HealthResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReadinessResponse_Checks. Returns the specified
// element and whether it was found
func (a ReadinessResponse_Checks) Get(fieldName string) (value struct {
	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReadinessResponse_Checks
func (a *ReadinessResponse_Checks) Set(fieldName string, value struct {
	// Status Health status of the dependency
	Status ReadinessResponseChecksStatus `json:"status"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a *ReadinessResponse_Checks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cache"]; found {
		err = json.Unmarshal(raw, &a.Cache)
		if err != nil {
			return fmt.Errorf("error reading 'cache': %w", err)
		}
		delete(object, "cache")
	}

	if raw, found := object["queue"]; found {
		err = json.Unmarshal(raw, &a.Queue)
		if err != nil {
			return fmt.Errorf("error reading 'queue': %w", err)
		}
		delete(object, "queue")
	}

	if raw, found := object["storage"]; found {
		err = json.Unmarshal(raw, &a.Storage)
		if err != nil {
			return fmt.Errorf("error reading 'storage': %w", err)
		}
		delete(object, "storage")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Status Health status of the dependency
			Status ReadinessResponseChecksStatus `json:"status"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Status Health status of the dependency
				Status ReadinessResponseChecksStatus `json:"status"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReadinessResponse_Checks to handle AdditionalProperties
func (a ReadinessResponse_Checks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cache != nil {
		object["cache"], err = json.Marshal(a.Cache)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cache': %w", err)
		}
	}

	if a.Queue != nil {
		object["queue"], err = json.Marshal(a.Queue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'queue': %w", err)
		}
	}

	if a.Storage != nil {
		object["storage"], err = json.Marshal(a.Storage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storage': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get analysis result
	// (GET /v1/analysis/{analysisId})
	GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams)
	// Get real-time analysis progress
	// (GET /v1/analysis/{analysisId}/events)
	GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams)
	// Analyze a web page
	// (POST /v1/analyze)
	AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams)
	// Health check
	// (GET /v1/health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Liveness probe
	// (GET /v1/liveness)
	LivenessCheck(w http.ResponseWriter, r *http.Request)
	// Readiness probe
	// (GET /v1/readiness)
	ReadinessCheck(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get analysis result
// (GET /v1/analysis/{analysisId})
func (_ Unimplemented) GetAnalysis(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time analysis progress
// (GET /v1/analysis/{analysisId}/events)
func (_ Unimplemented) GetAnalysisEvents(w http.ResponseWriter, r *http.Request, analysisId openapi_types.UUID, params GetAnalysisEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Analyze a web page
// (POST /v1/analyze)
func (_ Unimplemented) AnalyzeURL(w http.ResponseWriter, r *http.Request, params AnalyzeURLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /v1/health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Liveness probe
// (GET /v1/liveness)
func (_ Unimplemented) LivenessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Readiness probe
// (GET /v1/readiness)
func (_ Unimplemented) ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAnalysis operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysis(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysis(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnalysisEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAnalysisEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "analysisId" -------------
	var analysisId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "analysisId", chi.URLParam(r, "analysisId"), &analysisId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "analysisId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisEventsParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion GetAnalysisEventsParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalysisEvents(w, r, analysisId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AnalyzeURL operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeURL(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, PasetoAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeURLParams

	headers := r.Header

	// ------------- Optional header parameter "API-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("API-Version")]; found {
		var APIVersion AnalyzeURLParamsAPIVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "API-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "API-Version", valueList[0], &APIVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "API-Version", Err: err})
			return
		}

		params.APIVersion = &APIVersion

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeURL(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LivenessCheck operation middleware
func (siw *ServerInterfaceWrapper) LivenessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LivenessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadinessCheck operation middleware
func (siw *ServerInterfaceWrapper) ReadinessCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadinessCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}", wrapper.GetAnalysis)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/analysis/{analysisId}/events", wrapper.GetAnalysisEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/analyze", wrapper.AnalyzeURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/liveness", wrapper.LivenessCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/readiness", wrapper.ReadinessCheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
