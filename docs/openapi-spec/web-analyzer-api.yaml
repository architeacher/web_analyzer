openapi: 3.0.3
info:
  title: Web Page Analyzer API
  description: |
    A web application that analyzes web pages and provides detailed information about:
    - HTML version
    - Page title
    - Heading counts by level
    - Internal and external links
    - Inaccessible links
    - Login form detection

    ## API Versioning

    This API uses semantic versioning and supports multiple versioning strategies:

    ### Version Strategy
    - **URL Path Versioning**: `/v1/` (primary method)
    - **Header Versioning**: `API-Version: v1` header (alternative)
    - **Content Type Versioning**: `application/vnd.web-analyzer.v1+json` (for specific operations)

    ### Version Information
    - All responses include `API-Version` header indicating the version used
    - Version-specific changes are documented in the changelog
    - Breaking changes require major version increment

    ## Security

    This API uses PASETO token authentication:
    - **PASETO tokens**: Platform Authentication Security Token Exchange and Operations - enhanced security tokens with issuer validation

    ## Security Headers

    All responses include standard security headers:
    - `X-Content-Type-Options: nosniff`
    - `X-Frame-Options: DENY`
    - `X-XSS-Protection: 1; mode=block`
    - `Strict-Transport-Security: max-age=31536000; includeSubDomains`
    - `Content-Security-Policy: default-src 'self'`
    - `Referrer-Policy: strict-origin-when-cross-origin`
    - `Permissions-Policy: camera=(), microphone=(), geolocation=()`
  version: 1.0.0
  contact:
    name: Web Page Analyzer Support
    url: https://github.com/architeacher/svc-web-analyzer
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://api.web-analyzer.dev/{version}/
    description: Local development server
    variables:
      version:
        default: 'v1'
        enum:
          - v1
        description: The API version to use

security:
  - PasetoAuth: []

paths:
  /v1/analyze:
    post:
      summary: Analyze a web page
      description: |
        Submits a URL for analysis. The analysis includes:
        - HTML version detection
        - Page title extraction
        - Heading counts (H1-H6)
        - Link analysis (internal/external/inaccessible)
        - Login form detection
      operationId: analyzeURL
      tags:
        - Analysis
      security:
        - PasetoAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
            examples:
              $ref: 'schemas/examples/analyze_request.yaml'
      responses:
        '202':
          description: Analysis request accepted
          headers:
            API-Version:
              $ref: '#/components/headers/ApiVersionHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'
              examples:
                $ref: 'schemas/examples/analyze_response.yaml'
        '400':
          $ref: 'schemas/errors/bad_request.yaml'
        '401':
          $ref: 'schemas/errors/unauthorized.yaml'
        '429':
          $ref: 'schemas/errors/rate_limit.yaml'
        '500':
          $ref: 'schemas/errors/server_error.yaml'

  /v1/analysis/{analysisId}:
    get:
      summary: Get analysis result
      description: Retrieves the result of a previously submitted analysis
      operationId: getAnalysis
      tags:
        - Analysis
      security:
        - PasetoAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
        - name: analysisId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the analysis
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
              examples:
                $ref: 'schemas/examples/analysis_result.yaml'
        '202':
          description: Analysis still in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisInProgress'
              examples:
                $ref: 'schemas/examples/analysis_in_progress.yaml'
        '404':
          $ref: 'schemas/errors/not_found.yaml'
        '410':
          description: Analysis failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisError'
              examples:
                $ref: 'schemas/examples/analysis_error.yaml'

  /v1/analysis/{analysisId}/events:
    get:
      summary: Get real-time analysis progress
      description: |
        Server-Sent Events endpoint for real-time analysis progress updates.
        This endpoint streams live updates about the analysis progress.
      operationId: getAnalysisEvents
      tags:
        - Real-time
      security:
        - PasetoAuth: []
      parameters:
        - $ref: '#/components/parameters/ApiVersionHeader'
        - name: analysisId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the analysis
      responses:
        '200':
          description: SSE stream of analysis progress
          content:
            text/event-stream:
              schema:
                type: string
              examples:
                $ref: 'schemas/examples/sse_events.yaml'

  /v1/liveness:
    get:
      summary: Liveness probe
      description: |
        Simple liveness check to determine if the service is running.
        Used by orchestrators (like Kubernetes) to determine if the container should be restarted.
      operationId: livenessCheck
      tags:
        - System
      security: []
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'
              examples:
                $ref: 'schemas/examples/liveness_response.yaml'
        '503':
          description: Service is dead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'
              examples:
                service_down:
                  $ref: 'schemas/examples/liveness_response.yaml#/service_down'

  /v1/readiness:
    get:
      summary: Readiness probe
      description: |
        Comprehensive readiness check to determine if the service is ready to accept traffic.
        Checks all critical dependencies including storage, cache, and queue systems.
        Used by orchestrators to determine if traffic should be routed to this instance.
      operationId: readinessCheck
      tags:
        - System
      security: []
      responses:
        '200':
          description: Service is ready to accept traffic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
              examples:
                $ref: 'schemas/examples/readiness_response.yaml'
        '503':
          description: Service is not ready (dependencies unavailable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
              examples:
                not_ready_service:
                  $ref: 'schemas/examples/readiness_response.yaml#/not_ready_service'

  /v1/health:
    get:
      summary: Health check
      description: |
        Comprehensive health check with detailed system information including uptime.
        This endpoint provides the same dependency status as readiness but includes
        additional system metrics. Protected with basic authentication.
      operationId: healthCheck
      tags:
        - System
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                $ref: 'schemas/examples/health_response.yaml'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                unhealthy_service:
                  $ref: 'schemas/examples/health_response.yaml#/unhealthy_service'

components:
  parameters:
    ApiVersionHeader:
      name: API-Version
      in: header
      required: false
      description: |
        API version to use for this request. If not specified, defaults to v1.
        Supported versions: v1
      schema:
        type: string
        enum: [v1]
        default: v1
      example: v1

  headers:
    ApiVersionHeader:
      description: API version used for this response
      schema:
        type: string
        enum: [v1]
        example: v1

  securitySchemes:
    PasetoAuth:
      type: http
      scheme: bearer
      bearerFormat: PASETO
      description: |
        PASETO (Platform Authentication Security Token Exchange and Operations) v4 token.
        A secure token format with issuer validation and enhanced security features.
        Format: Bearer v4.local.{payload} or Bearer v4.public.{payload}.{signature}
    BasicAuth:
      type: http
      scheme: basic
      description: Basic HTTP authentication for administrative endpoints

  schemas:
    # Analysis request/response schemas
    AnalyzeRequest:
      $ref: 'schemas/analysis-request.v1.yaml#/AnalyzeRequest'
    AnalysisResponse:
      $ref: 'schemas/analysis-response.v1.yaml#/AnalysisResponse'
    AnalysisResult:
      $ref: 'schemas/analysis-result.v1.yaml#/AnalysisResult'
    AnalysisInProgress:
      $ref: 'schemas/analysis-in-progress.v1.yaml#/AnalysisInProgress'
    AnalysisError:
      $ref: 'schemas/analysis-error.v1.yaml#/AnalysisError'


    # System response schemas
    LivenessResponse:
      $ref: 'schemas/liveness-response.v1.yaml#/LivenessResponse'
    ReadinessResponse:
      $ref: 'schemas/readiness-response.v1.yaml#/ReadinessResponse'
    HealthResponse:
      $ref: 'schemas/health-response.v1.yaml#/HealthResponse'

    # Common data schemas
    AnalysisData:
      $ref: 'schemas/common/analysis.yaml#/AnalysisData'
    LinkAnalysis:
      $ref: 'schemas/common/links.yaml#/LinkAnalysis'
    InaccessibleLink:
      $ref: 'schemas/common/links.yaml#/InaccessibleLink'
    FormAnalysis:
      $ref: 'schemas/common/forms.yaml#/FormAnalysis'
    LoginForm:
      $ref: 'schemas/common/forms.yaml#/LoginForm'
    ErrorResponse:
      $ref: 'schemas/common/error-response.yaml#/ErrorResponse'
    Pagination:
      $ref: 'schemas/common/pagination.yaml#/Pagination'

tags:
  - name: Analysis
    description: Web page analysis operations
  - name: Real-time
    description: Real-time updates via Server-Sent Events
  - name: System
    description: System liveness and readiness probes
